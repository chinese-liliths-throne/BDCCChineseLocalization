name: Build BDCC Chinese Localization Nightly
on:
  workflow_dispatch:
  schedule:
    - cron: '30 12 * * 1'
  push:
    tags:
      - 'v*'

permissions: write-all

env:
  GODOT_VERSION: "3.6"
  PARATRANZ_TOKEN: ${{ secrets.PARATRANZ_TOKEN }}
  PARATRANZ_PROJECT: ${{ secrets.PARATRANZ_PROJECT }}
  EXPORT_NAME: BDCC

jobs:
  get-tag:
    name: 📌 Get Tag
    runs-on: ubuntu-22.04
    outputs:
      release_version: ${{ steps.release-selector.outputs.RELEASE_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set pre-release version
        if: github.event.schedule == '30 12 * * 1' || github.event_name == 'workflow_dispatch'
        id: daily-version
        run: |
          echo "RELEASE_VERSION=$(date "+%y.%m.%d")" >> $GITHUB_OUTPUT
      - name: Set push-tag release version
        if: github.ref_type == 'tag'
        id: push-tag-version
        run: |
          NEWEST_TAG=$(git tag -l "v*" --sort=-version:refname | head -n 1)
          echo "RELEASE_VERSION=$NEWEST_TAG" >> $GITHUB_OUTPUT
      - name: Set Release version env variable
        id: release-selector
        run: |
          if [[ "${{ steps.daily-version.outputs.RELEASE_VERSION }}" != "" ]]; then
            RV="${{ steps.daily-version.outputs.RELEASE_VERSION }}"
          elif [[ "${{ steps.push-tag-version.outputs.RELEASE_VERSION }}" != "" ]]; then
            RV="${{ steps.push-tag-version.outputs.RELEASE_VERSION }}"
          else
            exit
          fi
          
          echo "RELEASE_VERSION=$RV" >> $GITHUB_OUTPUT
          echo "Current version is $RV"
  
  translate:
    name: 🌐 Translate
    runs-on: windows-latest
    needs: get-tag
    env:
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
    steps:
      - name: Check Submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          lfs: true

      - name: Checkout BDCC-Localization-Replacer
        uses: actions/checkout@v4
        with:
          repository: HCPTangHY/BDCC-Localization-Replacer
          ref: main
          submodules: 'recursive'
          path: 'BDCC-Localization-Replacer'
      - name: Checkout Paratranz.NET
        uses: actions/checkout@v4
        with:
          repository: Mochacola500/Paratranz.NET
          ref: main
          submodules: 'recursive'
          path: 'Paratranz.NET'

      - name: Set up .NET Sdk
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Run translation
        env:
          PYTHONIOENCODING: utf-8  # 如果是 Python 脚本
        run: |
          dotnet run --project BDCCChineseLocalization -- Translate ${{ env.PARATRANZ_TOKEN }} ${{ env.PARATRANZ_PROJECT }} -v ${{ needs.get-tag.outputs.release_version }}
      - name: Upload translation artifact when failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: bdcc-chinese-translation
          path: ./BdccChineseLocalization.zip
          retention-days: 7
        
      - name: Upload translation artifact
        uses: actions/upload-artifact@v4
        with:
          name: bdcc-chinese-translation
          path: ./BdccChineseLocalization.zip
          retention-days: 7
  
  window-build:
    name: 🏁 Windows Build
    needs: translate
    runs-on: ubuntu-22.04
    container:
      image: barichello/godot-ci:3.6
    steps:
      - name: Check Submodules
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Download translation artifact
        uses: actions/download-artifact@v4
        with:
          name: bdcc-chinese-translation
      - name: Unzip translation artifact
        run: unzip BdccChineseLocalization.zip -d ./BdccChineseLocalization
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
      - name: Build
        run: |
          mkdir -v -p ./build/windows
          cd BdccChineseLocalization
          godot --headless --export "Windows Desktop" ../build/windows/${EXPORT_NAME}.exe
      - name: Zip
        run: |
          cd ./build/windows/
          zip -r BDCC-Windows.zip .
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bdcc-windows
          path: ./build/windows/BDCC-Windows.zip
          retention-days: 7
  
  linux-build:
    name: 🐧 Linux Build
    needs: translate
    runs-on: ubuntu-22.04
    container:
      image: barichello/godot-ci:3.6
    steps:
      - name: Check Submodules
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Download translation artifact
        uses: actions/download-artifact@v4
        with:
          name: bdcc-chinese-translation
      - name: Unzip translation artifact
        run: unzip BdccChineseLocalization.zip -d ./BdccChineseLocalization
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          ls /root/.local/share/godot/templates/${GODOT_VERSION}.stable
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
          ls ~/.local/share/godot/templates/${GODOT_VERSION}.stable
      - name: Build
        run: |
          mkdir -v -p ./build/linux
          cd BdccChineseLocalization
          godot --headless --export "Linux/X11" ../build/linux/${EXPORT_NAME}.x86_64
      - name: Zip
        run: |
          cd ./build/linux/
          zip -r BDCC-Linux.zip .
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bdcc-linux
          path: ./build/linux/BDCC-Linux.zip
          retention-days: 7
  
  macos-build:
    name: 🍎 MacOS Build
    needs: translate
    runs-on: ubuntu-22.04
    container:
      image: barichello/godot-ci:3.6
    steps:
      - name: Check Submodules
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Download translation artifact
        uses: actions/download-artifact@v4
        with:
          name: bdcc-chinese-translation
      - name: Unzip translation artifact
        run: unzip BdccChineseLocalization.zip -d ./BdccChineseLocalization
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
      - name: Build
        run: |
          mkdir -v -p ./build/macos
          cd BdccChineseLocalization
          godot --headless --export "Mac OSX" ../build/macos/${EXPORT_NAME}.zip
      - name: Zip
        run: |
          cd ./build/macos/
          zip -r BDCC-Macos.zip .
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bdcc-macos
          path: ./build/macos/BDCC-Macos.zip
          retention-days: 7
  
  web-build:
    name: 🌐 Web Build
    needs: translate
    runs-on: ubuntu-22.04
    continue-on-error: true
    container:
      image: barichello/godot-ci:3.6
    steps:
      - name: Check Submodules
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Download translation artifact
        uses: actions/download-artifact@v4
        with:
          name: bdcc-chinese-translation
      - name: Unzip translation artifact
        run: unzip BdccChineseLocalization.zip -d ./BdccChineseLocalization
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
      - name: Build
        run: |
          mkdir -v -p ./build/web
          cd BdccChineseLocalization
          godot --headless --export "HTML5" ../build/web/index.html
      - name: Zip
        run: |
          cd ./build/web/
          zip -r BDCC-WEB.zip .
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bdcc-web
          path: ./build/web/BDCC-WEB.zip
          retention-days: 7
      - name: Delete Zip
        run: |
          rm -rf ./build/web/BDCC-WEB.zip
      - name: Install rsync 📚
        run: |
            apt-get update && apt-get install -y rsync
      - name: Deploy to GitHub Pages 🚀
        uses: JamesIves/github-pages-deploy-action@releases/v4
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: build/web # The folder the action should deploy.
  android-build:
    name: 🤖 Android Build
    needs: translate
    runs-on: ubuntu-22.04
    container:
      image: barichello/godot-ci:3.6
    steps:
      - name: Check Submodules
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Download translation artifact
        uses: actions/download-artifact@v4
        with:
          name: bdcc-chinese-translation
      - name: Unzip translation artifact
        run: unzip BdccChineseLocalization.zip -d ./BdccChineseLocalization
      - name: copy editor settings to expected directory
        run: |
            mkdir -v -p ~/.config/godot
            cp -v /root/.config/godot/editor_settings-3.tres ~/.config/godot/
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable

      - name: Build
        run: |
          mkdir -v -p ./build/android
          cd BdccChineseLocalization
          echo 'export/android/android_sdk_path = "/usr/lib/android-sdk"' >> ~/.config/godot/editor_settings-3.tres
          echo "${{ secrets.ANDROID_KEYSTORE_FILE }}" | base64 --decode > $GITHUB_WORKSPACE/debug.keystore
          sed 's@keystore/debug=".*"@keystore/debug="'$GITHUB_WORKSPACE/debug.keystore'"@g' -i export_presets.cfg
          sed 's@keystore/release=".*"@keystore/release="'$GITHUB_WORKSPACE/debug.keystore'"@g' -i export_presets.cfg
          godot --headless --export "Android" ../build/android/${EXPORT_NAME}-Android.apk
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bdcc-android
          path: ./build/android/BDCC-Android.apk
  
  
  release:
    name: 🚀 Release
    needs: [ window-build, linux-build, macos-build, web-build,android-build, get-tag ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1

      - uses: actions/setup-python@v5
      - run: pip install marko

      - name: Download Godot Artifact
        uses: actions/download-artifact@v4.1.4
        with:
          pattern: 'bdcc-*'
          merge-multiple: true
      - name: Save source code for test
        run: |
          mv ./BdccChineseLocalization.zip ./source-code-for-test.zip
      - name: Create release.md
        shell: python
        run: |
          import marko
          from marko import Markdown
          parser = Markdown()
          with open("README.md", "r") as f:
            text = "".join(f.readlines())
          document = parser.parse(text)
          update_log = [node for node in document.children if isinstance(node, marko.block.List)][-1]
          latest_log = update_log.children[0]
          release_text = parser.render(latest_log)
          with open("release.md", "w") as f:
            f.write(release_text)
      - name: Automatic Pre Releases
        uses: ncipollo/release-action@v1.14.0
        if: github.event.schedule == '30 12 * * *' || github.event_name == 'workflow_dispatch'
        env:
          RELEASE_VERSION: ${{ needs.get-tag.outputs.release_version }}
        with:
          tag: "bdcc.${{ env.RELEASE_VERSION }}"
          prerelease: true
          name: "Pre-Release ${{ env.RELEASE_VERSION }}"
          allowUpdates: true
          artifacts: |
            *.zip
            *.apk
      - name: Automatic Releases
        uses: ncipollo/release-action@v1.14.0
        if: github.ref_type == 'tag'
        env:
          RELEASE_VERSION: ${{ needs.get-tag.outputs.release_version }}
        with:
          tag: "${{ env.RELEASE_VERSION }}"
          prerelease: false
          name: "Release ${{ env.RELEASE_VERSION }}"
          allowUpdates: true
          bodyFile: release.md
          artifacts: |
            *.zip
            *.apk
